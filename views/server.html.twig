{% extends "base.html.twig" %}

{% block title %}{{ title }} â€” {{ parent() }}{% endblock %}
{% block content %}
    {% include '_server_menu.html.twig' with { title: title, server_name: server_name, hostname: hostname, hosts: hosts } %}
    {% include '_period_menu.html.twig' with { server_name: server_name, hostname: hostname, period: period, periods: periods } %}
    <div class="row-fluid">
      <div class="span{{ period == '1 month' or period == '1 week' ? '12' : '6' }}">
        <h2>Request time <small><a href="{{ path('server_req_time', { serverName: server_name, hostName: hostname }) }}">view details</a></small></h2>
        {% if req|length > 0 %}
        <div id="req-time-chart" style="height: 450px;"></div>
        <script type="text/javascript">
            var rtChart;

            var rtChartData = [];
            {% for item in req %}
            rtChartData.push({
                date: new Date({{ item.date }}),
                req_time_90: {{ item.req_time_90 }},
                req_time_95: {{ item.req_time_95 }},
                req_time_99: {{ item.req_time_99 }},
                req_time_100: {{ item.req_time_100 }},
                req_time_border: {{ req_time_border }}
            });
            {% endfor %}

            AmCharts.ready(function () {
                // SERIAL CHART
                rtChart = new AmCharts.AmSerialChart();
                rtChart.pathToImages = "{{ base_url }}js/amcharts/images/";
                rtChart.dataProvider = rtChartData;
                rtChart.categoryField = "date";

                var categoryAxis = rtChart.categoryAxis;
                categoryAxis.parseDates = true;
                categoryAxis.equalSpacing = false;
                categoryAxis.minPeriod = "mm";
                categoryAxis.gridAlpha = 0.07;
                categoryAxis.axisColor = "#DADADA";

                // Value
                var valueAxis = new AmCharts.ValueAxis();
                valueAxis.gridAlpha = 0.07;
                rtChart.addValueAxis(valueAxis);

                // GRAPH
                var graph;

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "Max request time";
                graph.balloonText = "[[value]] ms";
                graph.valueField = "req_time_100";
                graph.lineAlpha = 1;
                graph.lineColor = "#729462";
                graph.fillAlphas = 1;
                graph.fillColor = "#729462";
                graph.hidden = true;
                rtChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "99th percentile of request time";
                graph.balloonText = "[[value]] ms";
                graph.valueField = "req_time_99";
                graph.lineAlpha = 1;
                graph.lineColor = "#C38630";
                graph.fillAlphas = 0.9;
                graph.fillColor = "#C38630";
                rtChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "95th percentile of request time";
                graph.balloonText = "[[value]] ms";
                graph.valueField = "req_time_95";
                graph.lineAlpha = 1;
                graph.lineColor = "#700193";
                graph.fillAlphas = 0.9;
                graph.fillColor = "#700193";
                rtChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "90th percentile of request time";
                graph.balloonText = "[[value]] ms";
                graph.valueField = "req_time_90";
                graph.lineAlpha = 1;
                graph.lineColor = "#39A3B9";
                graph.fillAlphas = 0.9;
                rtChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "Border request time";
                graph.balloonText = "[[value]] ms";
                graph.valueField = "req_time_border";
                graph.lineAlpha = 0.4;
                graph.dashLength = 2;
                graph.lineColor = "#e24a14";
                graph.fillAlphas = 0;
                rtChart.addGraph(graph);

                // CURSOR
                var chartCursor = new AmCharts.ChartCursor();
                chartCursor.cursorPosition = "mouse";
                chartCursor.categoryBalloonDateFormat = "JJ:NN, DD MMMM YYYY";
                rtChart.addChartCursor(chartCursor);

                // LEGEND
                var legend = new AmCharts.AmLegend();
                rtChart.addLegend(legend);

                // WRITE
                rtChart.write("req-time-chart");
            });
        </script>
        {% else %}
        <p>No data for requests.</p>
        {% endif %}
      </div>
      <div class="span{{ period == '1 month' or period == '1 week' ? '12' : '6' }}">
        <h2>Requests per sec {# <small><a href="{{ path('server_request_time', { serverName: server_name }) }}">view details</a></small> #}</h2>
        {% if req_per_sec.data|length > 0 %}
        <div id="req-per-sec-chart" style="height: {{ 346 + req_per_sec.hosts|length * 19 + (req_per_sec.hosts|length > 1 ? 19 : 0) }}px;"></div>
        <script type="text/javascript">
            var rpsChart;

            var rpsChartData = [];
            {% for date, item in req_per_sec.data %}
            rpsChartData.push({ date: new Date({{ date }})
                {% for iter in item %}
                    , rps{{ iter.parsed_hostname }}: {{ iter.req_per_sec }}
                {% endfor %}
            });
            {% endfor %}

            AmCharts.ready(function () {
                // SERIAL CHART
                rpsChart = new AmCharts.AmSerialChart();
                rpsChart.pathToImages = "{{ base_url }}js/amcharts/images/";
                rpsChart.dataProvider = rpsChartData;
                rpsChart.categoryField = "date";

                var categoryAxis = rpsChart.categoryAxis;
                categoryAxis.parseDates = true;
                categoryAxis.equalSpacing = false;
                categoryAxis.minPeriod = "mm";
                categoryAxis.gridAlpha = 0.07;
                categoryAxis.axisColor = "#DADADA";

                // Value
                var valueAxis = new AmCharts.ValueAxis();
                valueAxis.gridAlpha = 0.07;
                rpsChart.addValueAxis(valueAxis);

                // GRAPH
                var graph;

                {% for host, keydata in req_per_sec.hosts %}
                    graph = new AmCharts.AmGraph();
                    graph.type = "line"; // try to change it to "column"
                    graph.title = "{{ host == '_' ? 'Total requests per second at all hosts' : 'Requests per second at host ' ~ keydata.host }}";
                    graph.valueField = "rps{{ host }}";
                    graph.lineAlpha = 1;
                    graph.lineColor = "#{{ keydata.color }}";
                    graph.fillAlphas = 0.1;
                    rpsChart.addGraph(graph);
                {% endfor %}

                // CURSOR
                var chartCursor = new AmCharts.ChartCursor();
                chartCursor.cursorPosition = "mouse";
                chartCursor.categoryBalloonDateFormat = "JJ:NN, DD MMMM YYYY";
                rpsChart.addChartCursor(chartCursor);

                // LEGEND
                var legend = new AmCharts.AmLegend();
                legend.maxColumns = 2;
                rpsChart.addLegend(legend);

                // WRITE
                rpsChart.write("req-per-sec-chart");
            });
        </script>
        {% else %}
        <p>No data for requests frequency</p>
        {% endif %}
      </div>
    </div>
    <div class="row-fluid">
      <div class="span{{ period == '1 month' or period == '1 week' ? '12' : '6' }}">
        <h2>Memory peak usage <small><a href="{{ path('server_mem_usage', { serverName: server_name, hostName: hostname }) }}">view details</a></small></h2>
        {% if req|length > 0 %}
        <div id="mem-usage-chart" style="height: 450px;"></div>
        <script type="text/javascript">
            var muChart;

            var muChartData = [];
            {% for item in req %}
            muChartData.push({
                date: new Date({{ item.date }}),
                mem_peak_usage_90: {{ item.mem_peak_usage_90 }},
                mem_peak_usage_95: {{ item.mem_peak_usage_95 }},
                mem_peak_usage_99: {{ item.mem_peak_usage_99 }},
                mem_peak_usage_100: {{ item.mem_peak_usage_100 }}
            });
            {% endfor %}

            AmCharts.ready(function () {
                // SERIAL CHART
                muChart = new AmCharts.AmSerialChart();
                muChart.pathToImages = "{{ base_url }}js/amcharts/images/";
                muChart.dataProvider = muChartData;
                muChart.categoryField = "date";

                var categoryAxis = muChart.categoryAxis;
                categoryAxis.parseDates = true;
                categoryAxis.equalSpacing = false;
                categoryAxis.minPeriod = "mm";
                categoryAxis.gridAlpha = 0.07;
                categoryAxis.axisColor = "#DADADA";

                // Value
                var valueAxis = new AmCharts.ValueAxis();
                valueAxis.gridAlpha = 0.07;
                muChart.addValueAxis(valueAxis);

                // GRAPH
                var graph;

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "Max memory peak usage";
                graph.balloonText = "[[value]] kB";
                graph.valueField = "mem_peak_usage_100";
                graph.lineAlpha = 1;
                graph.lineColor = "#729462";
                graph.fillAlphas = 0.9;
                graph.fillColor = "#729462";
                graph.hidden = true;
                muChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "99th percentile of memory peak usage";
                graph.balloonText = "[[value]] kB";
                graph.valueField = "mem_peak_usage_99";
                graph.lineAlpha = 1;
                graph.lineColor = "#C38630";
                graph.fillAlphas = 0.9;
                graph.fillColor = "#C38630";
                muChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "95th percentile of memory peak usage";
                graph.balloonText = "[[value]] kb";
                graph.valueField = "mem_peak_usage_95";
                graph.lineAlpha = 1;
                graph.lineColor = "#700193";
                graph.fillAlphas = 0.9;
                graph.fillColor = "#700193";
                muChart.addGraph(graph);

                graph = new AmCharts.AmGraph();
                graph.type = "line"; // try to change it to "column"
                graph.title = "90th percentile of memory peak usage";
                graph.balloonText = "[[value]] kB";
                graph.valueField = "mem_peak_usage_90";
                graph.lineAlpha = 1;
                graph.lineColor = "#39A3B9";
                graph.fillAlphas = 0.9;
                muChart.addGraph(graph);

                // CURSOR
                var chartCursor = new AmCharts.ChartCursor();
                chartCursor.cursorPosition = "mouse";
                chartCursor.categoryBalloonDateFormat = "JJ:NN, DD MMMM YYYY";
                muChart.addChartCursor(chartCursor);

                // LEGEND
                var legend = new AmCharts.AmLegend();
                muChart.addLegend(legend);

                // WRITE
                muChart.write("mem-usage-chart");
            });
        </script>
        {% else %}
        <p>No data for memory usage.</p>
        {% endif %}
      </div>
        <div class="span{{ period == '1 month' or period == '1 week' ? '12' : '6' }}">
            <h2>CPU peak usage <small><a href="{{ path('server_cpu_usage', { serverName: server_name, hostName: hostname }) }}">view details</a></small></h2>
            {% if req|length > 0 %}
                <div id="cpu-usage-chart" style="height: 450px;"></div>
                <script type="text/javascript">
                    var cpuChart;

                    var cpuChartData = [];
                    {% for item in req %}
                    cpuChartData.push({
                        date: new Date({{ item.date }}),
                        cpu_peak_usage_90: {{ item.cpu_peak_usage_90 }},
                        cpu_peak_usage_95: {{ item.cpu_peak_usage_95 }},
                        cpu_peak_usage_99: {{ item.cpu_peak_usage_99 }},
                        cpu_peak_usage_100: {{ item.cpu_peak_usage_100 }}
                    });
                    {% endfor %}

                    AmCharts.ready(function () {
                        // SERIAL CHART
                        cpuChart = new AmCharts.AmSerialChart();
                        cpuChart.pathToImages = "{{ base_url }}js/amcharts/images/";
                        cpuChart.dataProvider = cpuChartData;
                        cpuChart.categoryField = "date";

                        var categoryAxis = cpuChart.categoryAxis;
                        categoryAxis.parseDates = true;
                        categoryAxis.equalSpacing = false;
                        categoryAxis.minPeriod = "mm";
                        categoryAxis.gridAlpha = 0.07;
                        categoryAxis.axisColor = "#DADADA";

                        // Value
                        var valueAxis = new AmCharts.ValueAxis();
                        valueAxis.gridAlpha = 0.07;
                        cpuChart.addValueAxis(valueAxis);

                        // GRAPH
                        var graph;

                        graph = new AmCharts.AmGraph();
                        graph.type = "line"; // try to change it to "column"
                        graph.title = "Max CPU peak usage";
                        graph.balloonText = "[[value]]";
                        graph.valueField = "cpu_peak_usage_100";
                        graph.lineAlpha = 1;
                        graph.lineColor = "#729462";
                        graph.fillAlphas = 0.9;
                        graph.fillColor = "#729462";
                        graph.hidden = true;
                        cpuChart.addGraph(graph);

                        graph = new AmCharts.AmGraph();
                        graph.type = "line"; // try to change it to "column"
                        graph.title = "99th percentile of CPU peak usage";
                        graph.balloonText = "[[value]]";
                        graph.valueField = "cpu_peak_usage_99";
                        graph.lineAlpha = 1;
                        graph.lineColor = "#C38630";
                        graph.fillAlphas = 0.9;
                        graph.fillColor = "#C38630";
                        cpuChart.addGraph(graph);

                        graph = new AmCharts.AmGraph();
                        graph.type = "line"; // try to change it to "column"
                        graph.title = "95th percentile of CPU peak usage";
                        graph.balloonText = "[[value]]";
                        graph.valueField = "cpu_peak_usage_95";
                        graph.lineAlpha = 1;
                        graph.lineColor = "#700193";
                        graph.fillAlphas = 0.9;
                        graph.fillColor = "#700193";
                        cpuChart.addGraph(graph);

                        graph = new AmCharts.AmGraph();
                        graph.type = "line"; // try to change it to "column"
                        graph.title = "90th percentile of CPU peak usage";
                        graph.balloonText = "[[value]]";
                        graph.valueField = "cpu_peak_usage_90";
                        graph.lineAlpha = 1;
                        graph.lineColor = "#39A3B9";
                        graph.fillAlphas = 0.9;
                        cpuChart.addGraph(graph);

                        // CURSOR
                        var chartCursor = new AmCharts.ChartCursor();
                        chartCursor.cursorPosition = "mouse";
                        chartCursor.categoryBalloonDateFormat = "JJ:NN, DD MMMM YYYY";
                        cpuChart.addChartCursor(chartCursor);

                        // LEGEND
                        var legend = new AmCharts.AmLegend();
                        cpuChart.addLegend(legend);

                        // WRITE
                        cpuChart.write("cpu-usage-chart");
                    });
                </script>
            {% else %}
                <p>No data for CPU usage.</p>
            {% endif %}
        </div>
    </div>
    <div class="row-fluid">
      <div class="span{{ period == '1 month' or period == '1 week' ? '12' : '6' }}">
        <h2>Error statuses <small><a href="{{ path('server_statuses', { serverName: server_name }) }}">view details</a></small></h2>
        {% if statuses.data|length > 0 %}
        <div id="statuses-chart" style="height: 350px;"></div>
        <script type="text/javascript">
            var statusChart;

            var statusChartData = [];
            {% for item in statuses.data %}
            statusChartData.push({ date: new Date({{ item.date }})
                , status{{ item.error_code }}: {{ item.error_count }}
            });
            {% endfor %}

            AmCharts.ready(function () {
                // SERIAL CHART
                statusChart = new AmCharts.AmSerialChart();
                statusChart.pathToImages = "{{ base_url }}js/amcharts/images/";
                statusChart.dataProvider = statusChartData;
                statusChart.categoryField = "date";

                var categoryAxis = statusChart.categoryAxis;
                categoryAxis.parseDates = true;
                categoryAxis.equalSpacing = false;
                categoryAxis.minPeriod = "mm";
                categoryAxis.gridAlpha = 0.07;
                categoryAxis.axisColor = "#DADADA";

                // Value
                var valueAxis = new AmCharts.ValueAxis();
                valueAxis.gridAlpha = 0.07;
                statusChart.addValueAxis(valueAxis);

                // GRAPH
                var graph;

                {% for code, color in statuses.codes %}
                    graph = new AmCharts.AmGraph();
                    graph.type = "line"; // try to change it to "column"
                    graph.title = "Status {{ code }}";
                    graph.valueField = "status{{ code }}";
                    graph.lineAlpha = 1;
                    graph.lineColor = "#{{ color }}";
                    graph.fillAlphas = 0.1;
                    statusChart.addGraph(graph);
                {% endfor %}

                // CURSOR
                var chartCursor = new AmCharts.ChartCursor();
                chartCursor.cursorPosition = "mouse";
                chartCursor.categoryBalloonDateFormat = "JJ:NN, DD MMMM YYYY";
                statusChart.addChartCursor(chartCursor);

                // LEGEND
                var legend = new AmCharts.AmLegend();
                legend.maxColumns = 2;
                statusChart.addLegend(legend);

                // WRITE
                statusChart.write("statuses-chart");
            });
        </script>
        {% else %}
        <p>No data for error statuses</p>
        {% endif %}
      </div>
    </div>
{% endblock %}
